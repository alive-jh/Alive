<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context             
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<beans profile="development">

		<!-- 自动搜索@Controller标注的类 -->
		<context:component-scan base-package="com.wechat" />
		<!-- 读取外部jdbc properties文件 -->


		<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:config_dev/jdbc.properties</value>
					<value>classpath:redis.properties</value>
				</list>
			</property>
		</bean>


		<!-- 加载拦截器 -->
		<mvc:interceptors>
			<bean class="com.wechat.interceptor.CommonInterceptor" />

			<mvc:interceptor>
				<mvc:mapping path="/api/getAllVideoCompetitionByVerifSuccess2" />
				<mvc:mapping path="/api/getAllVideoCompetitionByVerifSuccess" />
				<mvc:mapping path="/api/randomVideos" />
				<mvc:mapping path="/api/voteRecord" />
				<bean class="com.wechat.interceptor.VideoVoteInterceptor" />
			</mvc:interceptor>

		</mvc:interceptors>

		<bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="110240000" />
		</bean>

		<bean id="sessionFactory"
			class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

			<!--指定hibernate配置文件 -->
			<property name="configLocation" value="classpath:config_dev/hibernate.cfg.xml"></property>
			<!--配置c3p0数据库连接池 -->
			<property name="dataSource">
				<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
					<property name="driverClass" value="${driverClass}"></property>
					<property name="jdbcUrl" value="${jdbcUrl}"></property>
					<property name="user" value="${jdbcName}"></property>
					<property name="password" value="${password}"></property>
					<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
					<!-- 指定连接数据库连接池的初始化连接数 -->
					<property name="initialPoolSize" value="8" />
					<!-- 指定连接数据库连接池的最小连接数 -->
					<property name="minPoolSize" value="8" />
					<!--指定连接数据库连接池的最大连接数 -->
					<property name="maxPoolSize" value="32" />
					<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
					<property name="maxIdleTime" value="1800" />
					<property name="maxStatements" value="0" />
					<property name="acquireIncrement" value="8" />
					<property name="idleConnectionTestPeriod" value="600" />
					<property name="acquireRetryDelay" value="100" />
					<property name="acquireRetryAttempts" value="30" />
					<property name="breakAfterAcquireFailure" value="false" />
					<property name="testConnectionOnCheckout" value="true" />

				</bean>
			</property>
		</bean>

		<!-- 声明事务 -->
		<bean name="transactionManager"
			class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"></property>
		</bean>
		<!-- 采用注解的方式 -->
		<tx:annotation-driven transaction-manager="transactionManager" />

		<!-- aop 代理方式 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="*" propagation="REQUIRED" />
			</tx:attributes>
		</tx:advice>

		<aop:config>
			<aop:pointcut id="interceptorPointCuts"
				expression="execution(* com.wechat.service.*.*(..))" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
		</aop:config>


		<mvc:annotation-driven />
		<!-- 静态资源的访问 -->



		<!--配置视图解析器 -->
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<!--请求转发的目录 -->
			<property name="prefix" value="/" />
			<property name="suffix" value=".jsp" />
		</bean>


		<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<property name="maxIdle" value="300" />
			<property name="maxTotal" value="1024" />
			<property name="maxWaitMillis" value="1000" />
			<property name="testOnBorrow" value="true" />
		</bean>

		<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
			<constructor-arg index="0" ref="poolConfig" />
			<constructor-arg index="1">
				<list>
					<bean class="redis.clients.jedis.JedisShardInfo">
						<constructor-arg index="0" value="${redis.ip}" />
						<constructor-arg index="1" value="${redis.port}"
							type="int" />
						<constructor-arg index="2" value="${redis.timeout}"
							type="int" />
						<property name="password" value="${redis.pass}" />
					</bean>
				</list>
			</constructor-arg>
		</bean>

		<bean id="redisHttpSessionConfiguration"
			class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
			<property name="maxInactiveIntervalInSeconds" value="600" />
		</bean>

		<bean id="jedisConnectionFactory"
			class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
			destroy-method="destroy">
			<property name="hostName" value="${redis.ip}" />
			<property name="port" value="${redis.port}" />
			<property name="password" value="${redis.pass}" />
			<property name="timeout" value="${redis.timeout}" />
			<property name="usePool" value="true" />
			<property name="poolConfig" ref="poolConfig" />
		</bean>

		<!-- validated 校验配置start -->
		<bean id="validator"
			class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
			<!-- 提供检验机制的类： 此处用的而是Hibernate校验器，但是跟Hibernate没有关系 -->
			<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
			<!-- 指定校验的使用的资源文件, 如果不需要额外的错误配置文件，就不用配置该属性， 在配置文件中配置k-v的错误提示信息，如果不指定则使用默认配置：classpath下的ValidationMessages.properties -->
		</bean>
		<!-- 额外错误信息文件配置 -->
		<!-- validated 校验配置end -->


		<!-- 注解驱动,替换处理器映射器、处理器适配器 -->
		<mvc:annotation-driven validator="validator" />


	</beans>

	<beans profile="formal">
		<!-- 自动搜索@Controller标注的类 -->
		<context:component-scan base-package="com.wechat" />
		<!-- 读取外部jdbc properties文件 -->


		<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:config_formal/jdbc.properties</value>
					<value>classpath:redis.properties</value>
				</list>
			</property>
		</bean>


		<!-- 加载拦截器 -->
		<mvc:interceptors>
			<bean class="com.wechat.interceptor.CommonInterceptor" />

			<mvc:interceptor>
				<mvc:mapping path="/api/getAllVideoCompetitionByVerifSuccess2" />
				<mvc:mapping path="/api/getAllVideoCompetitionByVerifSuccess" />
				<mvc:mapping path="/api/randomVideos" />
				<mvc:mapping path="/api/voteRecord" />
				<bean class="com.wechat.interceptor.VideoVoteInterceptor" />
			</mvc:interceptor>

		</mvc:interceptors>

		<bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="110240000" />
		</bean>

		<bean id="sessionFactory"
			class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

			<!--指定hibernate配置文件 -->
			<property name="configLocation" value="classpath:config_formal/hibernate.cfg.xml"></property>
			<!--配置c3p0数据库连接池 -->
			<property name="dataSource">
				<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
					<property name="driverClass" value="${driverClass}"></property>
					<property name="jdbcUrl" value="${jdbcUrl}"></property>
					<property name="user" value="${jdbcName}"></property>
					<property name="password" value="${password}"></property>
					<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
					<!-- 指定连接数据库连接池的初始化连接数 -->
					<property name="initialPoolSize" value="8" />
					<!-- 指定连接数据库连接池的最小连接数 -->
					<property name="minPoolSize" value="8" />
					<!--指定连接数据库连接池的最大连接数 -->
					<property name="maxPoolSize" value="32" />
					<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
					<property name="maxIdleTime" value="1800" />
					<property name="maxStatements" value="0" />
					<property name="acquireIncrement" value="8" />
					<property name="idleConnectionTestPeriod" value="600" />
					<property name="acquireRetryDelay" value="100" />
					<property name="acquireRetryAttempts" value="30" />
					<property name="breakAfterAcquireFailure" value="false" />
					<property name="testConnectionOnCheckout" value="true" />

				</bean>
			</property>
		</bean>

		<!-- 声明事务 -->
		<bean name="transactionManager"
			class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"></property>
		</bean>
		<!-- 采用注解的方式 -->
		<tx:annotation-driven transaction-manager="transactionManager" />

		<!-- aop 代理方式 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="*" propagation="REQUIRED" />
			</tx:attributes>
		</tx:advice>

		<aop:config>
			<aop:pointcut id="interceptorPointCuts"
				expression="execution(* com.wechat.service.*.*(..))" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
		</aop:config>


		<mvc:annotation-driven />
		<!-- 静态资源的访问 -->



<!--		&lt;!&ndash;配置视图解析器 &ndash;&gt;-->
<!--		<bean-->
<!--			class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
<!--			&lt;!&ndash;请求转发的目录 &ndash;&gt;-->
<!--			<property name="prefix" value="/" />-->
<!--			<property name="suffix" value=".jsp" />-->
<!--		</bean>-->


		<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<property name="maxIdle" value="300" />
			<property name="maxTotal" value="1024" />
			<property name="maxWaitMillis" value="1000" />
			<property name="testOnBorrow" value="true" />
		</bean>

		<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
			<constructor-arg index="0" ref="poolConfig" />
			<constructor-arg index="1">
				<list>
					<bean class="redis.clients.jedis.JedisShardInfo">
						<constructor-arg index="0" value="${redis.ip}" />
						<constructor-arg index="1" value="${redis.port}"
							type="int" />
						<constructor-arg index="2" value="${redis.timeout}"
							type="int" />
						<property name="password" value="${redis.pass}" />
					</bean>
				</list>
			</constructor-arg>
		</bean>

		<bean id="redisHttpSessionConfiguration"
			class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
			<property name="maxInactiveIntervalInSeconds" value="600" />
		</bean>

		<bean id="jedisConnectionFactory"
			class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
			destroy-method="destroy">
			<property name="hostName" value="${redis.ip}" />
			<property name="port" value="${redis.port}" />
			<property name="password" value="${redis.pass}" />
			<property name="timeout" value="${redis.timeout}" />
			<property name="usePool" value="true" />
			<property name="poolConfig" ref="poolConfig" />
		</bean>
		
		<!-- validated 校验配置start -->
		<bean id="validator"
			class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
			<!-- 提供检验机制的类： 此处用的而是Hibernate校验器，但是跟Hibernate没有关系 -->
			<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		</bean>
		<!-- 额外错误信息文件配置 -->
		<!-- validated 校验配置end -->


		<!-- 注解驱动,替换处理器映射器、处理器适配器 -->
		<mvc:annotation-driven validator="validator" />

	</beans>





</beans>
